# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule <%= namespace %>.Model.<%= model.name %> do
  @moduledoc """
  <%= render_description(model.description, indent_subsequent: 2) %>

  ## Attributes
  <%= for property <- model.properties do %>
  *   `<%= property.name %>` (*type:* `<%= property.type.typespec %>`, *default:* `<%= GoogleApis.Generator.ElixirGenerator.Model.value_string(property.default) %>`) - <%= render_description(property.description, indent_subsequent: 6) %><% end %>
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
    <%= for property <- model.properties do %>
      :"<%= property.name %>" => <%= property.type.typespec %>,
    <% end %>
  }
  <%= for property <- model.properties do %>
  field(:"<%= property.name %>"<%= if property.description && String.contains?(property.description, " Read-only.") do %>, readonly: true<% end %><%= if property.type.struct do %>, as: <%= property.type.struct %><% end %><%= if property.type.name == "array" do %>, type: :list<% end %><%= if property.type.name == "arrayarray" do %>, type: :listlist<% end %><%= if property.type.name == "map" do %>, type: :map<% end %>)<% end %>
end

defimpl Poison.Decoder, for: <%= namespace %>.Model.<%= model.name %> do
  def decode(value, options) do
    <%= namespace %>.Model.<%= model.name %>.decode(value, options)
  end
end

defimpl Poison.Encoder, for: <%= namespace %>.Model.<%= model.name %> do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
